<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Secret Project</title>
		<meta charset="utf-8" name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
        <script src="https://code.jquery.com/jquery-1.10.2.js"></script>
        <script src="https://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
		<link href="https://fonts.googleapis.com/css?family=Lato:100,200,300,400,700,900" rel="stylesheet">

		<style>
			body {
				font-family: "Lato", sans-serif;
				font-weight: 400;
			}

			.active {
				display: block !important;
			}

			.container-fluid {
				overflow: hidden;
				border-radius: 5px;
				display: none;
			}

			#startButton {
				display: block;
				width: 160px;
				height: 88px;
				background: black;
				color: white;
				border-radius: 5px;
				font-size: 32px;
				font-weight: 900;
				padding-top: 12px;
				text-align: center;
				margin: auto;
				cursor: pointer;
			}

			#startButton:hover {
				background: #3f3f3f;
			}

			#dropRow {
				width: 100%;
				height: 250px;
				display: block;
				background: #eee;
				margin: auto;
				text-align: center;
			}
			.dropZone {
				display: inline-block;
				position: relative;
				top: -300px;
				border-radius: 10px;
				width: 180px;
				height: 154px;
				box-shadow: 1px 2px 4px rgba(0, 0, 0, .5);
				margin: 12px;
				text-align: center;
				vertical-align: middle;
				font-size: 32px;
				padding-top: 70px;
				cursor: default;
			}
			.dropZone:hover {
				background: #3f3f3f;
			}
			.hoverDrop {
				background: #3f3f3f;
			}
			.counter {
				font-size: 40px;
				font-weight: 100;
				display: block;
				position: absolute;
				left: 4px;
				bottom: 12px;
				width: 40px;
				height: 40px;
				border-radius: 50px;
			}

			#resultsRow {
				width: 100%;
				height: 350px;
				display: block;
				background: #eee;
				margin: auto;
				text-align: center;
				overflow: hidden;
			}
			.resultStack {
				display: inline-table;
				width: 180px;
				/*height: 346px;*/
				text-align: center;
				font-size: 32px;
				font-weight: 900;
				cursor: default;
				padding: 12px;
			}
			.resultPreview {
				display: block;
				width: 180px;
				height: 28px !important;
				box-shadow: 1px 2px 4px rgba(0, 0, 0, .5);
				border-top-left-radius: 10px;
				border-top-right-radius: 10px;
				font-weight: 200;
				font-size: 20px;
				margin-bottom: 12px;
				z-index: 0 !important;
			}
			.stackDrop {
				background: rgba(232, 45, 45, 0.65);
			}
			.resultStructure {
				height: 350px;
			}

			#traitRow {
				display: block;
				position: relative;
				width: 100%;
				height: auto;
				text-align: center;
				background: #aeaeae;
				text-align: center;
			}
			.displayCard {
				width: auto;
				height: auto;
				display: none;
			}
			.traitCard {
				display: inline-block;
				border-radius: 10px;
				width: 180px;
				height: 154px;
				box-shadow: 1px 2px 4px rgba(0, 0, 0, .5);
				text-align: center;
				vertical-align: middle;
				font-size: 32px;
				padding-top: 70px;
				cursor: move;
				background: white;
				font-weight: 100;
				margin: 12px;
				top: 300px;
			}

			.whiteSide {
				background: white;
				color: black;
			}
			.blackSide {
				background: black;
				color: white;
			}
			#remainingCount {
				left: auto;
				right: 20px;
				bottom: 12px;
				cursor: default;
				color: white;
				font-weight: 400;
				font-size: 45px;
			}
			#endGame {
				display: none;
				position: absolute;
				color: white;
				height: 40px;
				width: 180px;
				font-size: 30px;
				font-weight: 200;
				background: rgba(232, 45, 45, 0.65);
				cursor: pointer;
			}
		</style>
    </head>
    <body>
		<div id="startButton">LET'S DO IT</div>
		<div class="container-fluid">
			<div id="dropRow">
				<div class="youAreDrop blackSide dropZone" id="youAre">
					YOU ARE
					<div class="counter">0</div>
				</div>
				<div class="youAreNotDrop blackSide dropZone" id="youAreNot">
					YOU ARE NOT
					<div class="counter">0</div>
				</div>
				<div class="youAreTornDrop blackSide dropZone" id="youAreTorn">
					YOU ARE TORN
					<div class="counter">0</div>
				</div>
				<div class="doesNotApplyDrop whiteSide dropZone" id="doesNotApply">
					DOES NOT APPLY
					<div class="counter">0</div>
				</div>
			</div>

			<div id="resultsRow">
				<div id="youAreStack" class="resultStack">
				</div>
				<div id="youAreNotStack" class="resultStack">
				</div>
				<div id="youAreTornStack" class="resultStack">
				</div>
				<div id="doesNotApplyStack" class="resultStack">
				</div>
			</div>

			<div id="traitRow">
				<div id="remainingCount" class="counter">50</div>
				<div id="endGame">End Game</div>
				<div id="cardPile">
				</div>
				<!-- <div id="stackCounter">50<span> to go!</span></div> -->
			</div>
		</div>

		<script>
			$('#startButton').click(function(){
				$(this).css('display', 'none');
				$('.container-fluid').addClass('active');
				$('#youAre').animate({top:'0px'},450);
				$('#youAreNot').animate({top:'0px'},500);
				$('#youAreTorn').animate({top:'0px'},550);
				$('#doesNotApply').animate({top:'0px'},600);
				startGame();
			});

			$(function() {
				$('.dropZone').droppable({
					accept: '.traitCard',
					hoverClass: 'hoverDrop',
					drop: cardDropHandler
				});

				$('.resultStack').droppable({
					accept: '.resultPreview',
					hoverClass: 'stackDrop',
					drop: rearrangeHandler
				});

				$('#endGame').click(function() {
					endGame();
				});
			});


			var cardDropHandler = function(event, ui){
				queueUpCard();
				if(youAreArray.length >= 5) {
					$('#endGame').css('display', 'block');
				}

				var side = ui.draggable.data('side');
				var trait = ui.draggable[0].innerText;
				var dropZone = event.target;
				var div = event.toElement.id;
				var id = dropZone.id;

				var CardDropped = function() {
					this.trait = trait;
					this.side = side;
					this.id = id;
					this.currentArray = null;
				};

				CardDropped.prototype.uiUpdate = function(zone) {
					dropZone.children[0].innerHTML++;
					$('#'+div)
					.removeClass('traitCard')
					.addClass('resultPreview')
					.appendTo('#'+zone+'Stack')
					.each(function(){
						if(card.side === 'white'){
							$(this).addClass('whiteSide');
						} else {
							$(this).addClass('blackSide');
						}
					})
					.draggable({
						stack: '#resultsRow',
						snap: '.resultStack',
						snapMode: 'inner',
						containment: '#resultsRow',
						cursor: 'move',
						revert: true
					});
				};

				var card = new CardDropped();

				if(id === 'youAre'){
					card.uiUpdate(id);
					youAreArray.push(card);
				} else if(id === 'youAreNot'){
					card.uiUpdate(id);
					youAreNotArray.push(card);
				} else if(id === 'youAreTorn'){
					card.uiUpdate(id);
					youAreTornArray.push(card);
				} else if(id === 'doesNotApply'){
					card.uiUpdate(id);
					doesNotApplyArray.push(card);
				}

				var youAreStack = $('#youAreStack').children('.resultPreview:visible').length;
				var youAreNotStack = $('#youAreNotStack').children('.resultPreview:visible').length;
				var youAreTornStack = $('#youAreTornStack').children('.resultPreview:visible').length;
				var doesNotApplyStack = $('#doesNotApplyStack').children('.resultPreview:visible').length;

				//Remove over 8 results per stack
				if(youAreStack > 8){
					$('#youAreStack').children('.resultPreview:visible:first').hide();
				}
				if(youAreNotStack > 8){
					$('#youAreNotStack').children('.resultPreview:visible:first').hide();
				}
				if(youAreTornStack > 8){
					$('#youAreTornStack').children('.resultPreview:visible:first').hide();
				}
				if(doesNotApplyStack > 8){
					$('#doesNotApplyStack').children('.resultPreview:visible:first').hide();
				}
			};

			var rearrangeHandler = function(event, ui) {
				console.log('rearrangeHandler');
			};

		</script>
        <script>

            traitCardArray = [];
            youAreArray = [];
            youAreNotArray = [];
            youAreTornArray = [];
            doesNotApplyArray =[];
			currentCard = 0;

            var cardDefinitions = [
                {whiteSideTrait: 'Casual', blackSideTrait: 'Formal'},
                {whiteSideTrait: 'Playful', blackSideTrait: 'Professional'},
                {whiteSideTrait: 'Niche', blackSideTrait: 'Mass-Market'},
                {whiteSideTrait: 'Relatable', blackSideTrait: 'Mysterious'},
                {whiteSideTrait: 'Ordinary', blackSideTrait: 'Best-In-Class'},
                {whiteSideTrait: 'Basic', blackSideTrait: 'High-End'},
                {whiteSideTrait: 'Energetic', blackSideTrait: 'Calm'},
                {whiteSideTrait: 'Adventurous', blackSideTrait: 'Daring'},
                {whiteSideTrait: 'Laid-Back', blackSideTrait: 'Aggressive'},
                {whiteSideTrait: 'Rigorous', blackSideTrait: 'Effortless'},
                {whiteSideTrait: 'Cutting-Edge', blackSideTrait: 'Trusted'},
                {whiteSideTrait: 'Fun', blackSideTrait: 'Serious'},
                {whiteSideTrait: 'Crafted', blackSideTrait: 'Standardized'},
                {whiteSideTrait: 'Welcoming', blackSideTrait: 'Reserved'},
                {whiteSideTrait: 'Futuristic', blackSideTrait: 'Nostalgic'},
                {whiteSideTrait: 'Imaginative', blackSideTrait: 'Practical'},
                {whiteSideTrait: 'Experimental', blackSideTrait: 'Conventional'},
                {whiteSideTrait: 'Cheeky', blackSideTrait: 'Respectful'},
                {whiteSideTrait: 'Geeky', blackSideTrait: 'Wise'},
                {whiteSideTrait: 'Organic', blackSideTrait: 'Industrial'},
                {whiteSideTrait: 'Small', blackSideTrait: 'Big'},
                {whiteSideTrait: 'Idealistic', blackSideTrait: 'Realistic'},
                {whiteSideTrait: 'Quiet', blackSideTrait: 'Bold'},
                {whiteSideTrait: 'Optimistic', blackSideTrait: 'Pessimistic'},
                {whiteSideTrait: 'Multifaceted', blackSideTrait: 'Focused'},
                {whiteSideTrait: 'Curious', blackSideTrait: 'Certain'},
                {whiteSideTrait: 'Dynamic', blackSideTrait: 'Steady'},
                {whiteSideTrait: 'Scientific', blackSideTrait: 'Artistic'},
                {whiteSideTrait: 'Relaxed', blackSideTrait: 'Disciplined'},
                {whiteSideTrait: 'Surprising', blackSideTrait: 'Dependable'},
                {whiteSideTrait: 'Open-Minded', blackSideTrait: 'Opinionated'},
                {whiteSideTrait: 'Approachable', blackSideTrait: 'Exclusive'},
                {whiteSideTrait: 'Emotional', blackSideTrait: 'Analytical'},
                {whiteSideTrait: 'Intuitive', blackSideTrait: 'Technical'},
                {whiteSideTrait: 'Clever', blackSideTrait: 'Sincere'},
                {whiteSideTrait: 'Vibrant', blackSideTrait: 'Subtle'},
                {whiteSideTrait: 'Progressive', blackSideTrait: 'Traditional'},
                {whiteSideTrait: 'Modern', blackSideTrait: 'Vintage'},
                {whiteSideTrait: 'Graceful', blackSideTrait: 'Rugged'},
                {whiteSideTrait: 'Humble', blackSideTrait: 'Brash'},
                {whiteSideTrait: 'Complex', blackSideTrait: 'Simple'},
                {whiteSideTrait: 'Wide-Eyed', blackSideTrait: 'Sophisticated'},
                {whiteSideTrait: 'Glamorous', blackSideTrait: 'Austere'},
                {whiteSideTrait: 'Secure', blackSideTrait: 'Free'},
                {whiteSideTrait: 'Savvy', blackSideTrait: 'Scholarly'},
                {whiteSideTrait: 'Momentous', blackSideTrait: 'Everyday'},
                {whiteSideTrait: 'Budding', blackSideTrait: 'Accomplished'},
                {whiteSideTrait: 'Radical', blackSideTrait: 'Rational'},
                {whiteSideTrait: 'Raw', blackSideTrait: 'Refined'},
                {whiteSideTrait: 'Current', blackSideTrait: 'Timeless'}
            ];

            var CardStack = function() {

                this.traitCardArray = [];
            };


            TraitCard = function(config) {
                this.blackSide = false;
                this.whiteSide = false;
                this.blackSideTrait = config.blackSideTrait;
                this.whiteSideTrait = config.whiteSideTrait;
            };

            TraitCard.prototype.addCard = function(card) {
                traitCardArray.push(card);
            };


            for(var i = 0; i < cardDefinitions.length; i++) {
                var card = cardDefinitions[i];
                card = new TraitCard(card);

                traitCardArray.push(card);
            };

			for(var i = 0; i < traitCardArray.length; i++){
				$('<div></div>')
				.addClass('displayCard')
				.attr('id','card'+(i+1))
				.appendTo('#cardPile');
				$('<div class="traitCard whiteSide">' + traitCardArray[i].whiteSideTrait + '</div>')
				.attr('id', 'whiteSide'+(i+1))
				.data('side','white')
				.appendTo('#card'+(i+1))
				.draggable({
					stack: '#traitRow div',
					snap: '.dropZone',
					snapMode: 'inner',
					containment: '.container-fluid',
					cursor: 'pointer',
					revert: true
				});
				$('<div class="traitCard blackSide">' + traitCardArray[i].blackSideTrait + '</div>')
				.attr('id', 'blackSide'+(i+1))
				.data('side','black')
				.appendTo('#card'+(i+1))
				.draggable({
					stack: '#traitRow div',
					snap: '.dropZone',
					snapMode: 'inner',
					containment: '.container-fluid',
					cursor: 'move',
					revert: true
				});
			};

			var queueUpCard = function() {
				$('#remainingCount').html(function(){
					return cardDefinitions.length - currentCard;
				});

				currentCard++;
				if(currentCard <= traitCardArray.length + 1){
					$('.displayCard').removeClass('active');
					$('#card'+currentCard).addClass('active');
					$('#blackSide'+currentCard).animate({top:'0px'},600);
					$('#whiteSide'+currentCard).animate({top:'0px'},550);
				} else {
					endGame();
				}
			};

			var startGame = function(){
				queueUpCard();
			};

			var endGame =function(){
				alert('Game over! :(');
			};



        </script>

    </body>
</html>
